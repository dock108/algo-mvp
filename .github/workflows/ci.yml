name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    env:
      OPENBLAS_NUM_THREADS: 1  # Prevent memory issues with vectorbt
      NUMEXPR_MAX_THREADS: 4   # Prevent OOM/timeouts

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0 # Or latest
    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    - name: Install dependencies
      run: poetry install --no-interaction
    - name: Install Playwright
      run: |
        poetry run python -m playwright install --with-deps
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=src --cov-fail-under=80
  lint-format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Or your preferred Python version for linting
    - name: Install Ruff
      run: pip install ruff
    - name: Run Ruff Linter
      run: ruff check .
    - name: Run Ruff Formatter Check
      run: ruff format --check .

  docker-smoke:
    runs-on: ubuntu-latest
    needs: [build, lint-format-check] # Ensure it runs after other checks
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run compose smoke test
        env:
          CI_DOCKER: "true"
          # Pass secrets or tokens if needed for the smoke test, e.g., from GitHub secrets
          # SUPERVISOR_TOKEN: ${{ secrets.SUPERVISOR_TOKEN_CI }}
          # DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD_CI }}
        run: |
          echo "SUPERVISOR_TOKEN=${SUPERVISOR_TOKEN:-changeme}" > .env
          echo "DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD:-password}" >> .env
          cat .env # Print .env for debugging
          docker compose up -d --build
          echo "Waiting for services to start..."
          sleep 30 # Give services time to start
          echo "Checking backend health..."
          curl -f http://localhost:8000/health
          echo "Checking dashboard accessibility..."
          curl -f http://localhost:8501 | grep -q -i "<html"
          echo "Services are up and healthy."
        # Always run compose down, even if tests fail
      - name: Clean up Docker Compose services
        if: always() # Ensures this step runs even if previous steps fail
        run: |
          docker compose down -v --remove-orphans
          rm -f .env # Clean up .env file
